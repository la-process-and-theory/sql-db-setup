install.packages("DBI")
install.packages("Rtools")
updateR()
library(installr)
updateR()
install.packages("RMySQL")
#install.packages("DBI", "RMySQL")
library(DBI)
library(RMySQL)
db_user <- 'admin'
db_password <- 'HUDK4051'
db_name <- 'oudb'
db_host <- 'database-1.crtjgff03ugl.us-east-2.rds.amazonaws.com'
db_port <- 3306
mydb <- dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
#install.packages("DBI", "RMySQL")
library(DBI)
library(RMySQL)
db_user <- 'admin'
db_password <- 'HUDK4051'
db_name <- 'oudb'
db_host <- 'database-1.crtjgff03ugl.us-east-2.rds.amazonaws.com'
db_port <- 3306
mydb <- dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
db_user <- 'admin'
db_password <- 'HUDK4051'
db_name <- 'oudb'
db_host <- 'database-1.crtjgff03ugl.us-east-2.rds.amazonaws.com'
db_port <- 3306
mydb <- dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
#install.packages("DBI", "RMySQL")
library(DBI)
library(RMySQL)
db_user <- 'admin'
db_password <-'Hudk4051'
db_name <- 'oudb'
db_host <- 'database-1.crtjgff03ugl.us-east-2.rds.amazonaws.com'
db_port <- 3306
mydb <- dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
summary(mydb)
#Student demographic data
studentInfo <- read.csv("studentInfo.csv", header = TRUE)
#Student assessment data
studentAssessment <- read.csv("studentAssessment.csv", header = TRUE)
#Course data
courses <- read.csv("courses.csv", header = TRUE)
studentRegistration <- read.csv("studentRegistration.csv", header = TRUE)
View(studentInfo)
#List the tables in the DB - should be zero
dbListTables(mydb)
#Write a new table to the DB
dbWriteTable(mydb, "studentInfo", studentInfo)
dbWriteTable(mydb, "studentAssessment", studentAssessment)
dbWriteTable(mydb, "courses", courses)
dbWriteTable(mydb, "studentRegistration", studentRegistration)
#List tables to see that table was added
dbListTables(mydb)
#Read a particular table
dbReadTable(mydb, 'studentInfo')
#EXERCISE 1
#Make two toy data sets with at least three variables and at least 30 rows each in them. Have a mix of numeric and character variables. Transfer these dataframes to your SQL database using the DBI commands. Name the tables whatever you like.
library(tidyverse)
#Read a particular table
dbReadTable(mydb, 'studentInfo')
#EXERCISE 1
#Make two toy data sets with at least three variables and at least 30 rows each in them. Have a mix of numeric and character variables. Transfer these dataframes to your SQL database using the DBI commands. Name the tables whatever you like.
#loading the libraries needed to create toy data sets
library(tidyverse)
EDB1 <- studentInfo %>% select (id_student,gender,region)
EDB2 <- studentInfo %>% select(id_student,highest_education,num_of_prev_attempts)
dbWriteTable(mydb,"EDB1", EDB1)
dbWriteTable(mydb,"EDB2", EDB2)
dbReadTable(mydb, 'EDB1')
dbReadTable(mydb, 'EDB2')
#Query a portion of the database (always returns dataframe)
dbGetQuery(mydb, "SELECT * FROM studentInfo LIMIT 10;")
dbGetQuery(mydb, "SELECT * FROM studentInfo ORDER BY id_student LIMIT 10;")
#Query a portion of the database (always returns dataframe)
dbGetQuery(mydb, "SELECT * FROM studentInfo LIMIT 10;")
dbGetQuery(mydb, "SELECT * FROM studentInfo ORDER BY id_student LIMIT 10;")
dbGetQuery(mydb, "SELECT id_student, gender FROM studentInfo ORDER BY id_student DESC LIMIT 10;") #Order listed will be reflected in order in table
#install.packages("DBI", "RMySQL")
library(DBI)
library(RMySQL)
db_user <- 'admin'
db_password <-'Hudk4051'
db_name <- 'oudb'
db_host <- 'database-1.crtjgff03ugl.us-east-2.rds.amazonaws.com'
db_port <- 3306
mydb <- dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
summary(mydb)
#Student demographic data
studentInfo <- read.csv("studentInfo.csv", header = TRUE)
#Student assessment data
studentAssessment <- read.csv("studentAssessment.csv", header = TRUE)
#Course data
courses <- read.csv("courses.csv", header = TRUE)
studentRegistration <- read.csv("studentRegistration.csv", header = TRUE)
#List the tables in the DB - should be zero
dbListTables(mydb)
#Write a new table to the DB
dbWriteTable(mydb, "studentInfo", studentInfo)
View(EDB1)
View(EDB1)
View(EDB1)
View(EDB1)
View(EDB1)
#EXERCISE 2
#Read one of your toy data tables, make sure the output is ordered in descending order, you rename one of the variables and the output is limited to the first 20 rows.
dbGetQuery(mydb,"SELECT id_student AS studentID FROM EDB1 ORDER BY id_student DESC LIMIT 20")
#EXERCISE 2
#Read one of your toy data tables, make sure the output is ordered in descending order, you rename one of the variables and the output is limited to the first 20 rows.
dbGetQuery(mydb,"SELECT id_student AS studentID,gender,region FROM EDB1 ORDER BY id_student DESC LIMIT 20")
#Read the other table according to a condition of one of the variables.
dbGetQuery(mydb,"SELECT FROM EDB2 WHERE num_of_prev_attempts>1")
#Read the other table according to a condition of one of the variables.
dbGetQuery(mydb,"SELECT COUNT FROM EDB2 WHERE num_of_prev_attempts>1")
#Read the other table according to a condition of one of the variables.
dbGetQuery(mydb,"SELECT COUNT(*) FROM EDB2 WHERE num_of_prev_attempts>1")
#Read the other table according to a condition of one of the variables.
dbGetQuery(mydb,"SELECT * FROM EDB2 WHERE num_of_prev_attempts>1")
#Count rows
dbGetQuery(mydb, "SELECT COUNT(*) FROM studentAssessment;")
#Add a row
dbGetQuery(mydb, "INSERT INTO studentAssessment (id_assessment, id_student, date_submitted, is_banked, score) VALUES ('00001', '1', '20', '0', '50');")
#Add a row
dbGetQuery(mydb, "INSERT INTO studentAssessment (id_assessment, id_student, date_submitted, is_banked, score) VALUES ('00001', '1', '20', '0', '50');")
#Count rows again
dbGetQuery(mydb, "SELECT COUNT(*) FROM studentAssessment;")
#View inserted row
dbGetQuery(mydb, "SELECT * FROM studentAssessment ORDER BY id_student LIMIT 10;")
#Add a row with missing values
dbGetQuery(mydb, "INSERT INTO studentAssessment (id_assessment, id_student, date_submitted) VALUES ('00001', '1', '20');")
#View inserted row
dbGetQuery(mydb, "SELECT * FROM studentAssessment ORDER BY id_student LIMIT 10;")
#Update a row
dbGetQuery(mydb, "UPDATE studentAssessment SET score = '20' WHERE id_student = 1;")
dbGetQuery(mydb, "SELECT id_student, score FROM studentAssessment ORDER BY id_student LIMIT 10;")
#Update a row with NULL
dbGetQuery(mydb, "UPDATE studentAssessment SET score = 'NULL' WHERE id_student = 6516;")
#Delete a row (destructive)
dbGetQuery(mydb, "DELETE FROM studentAssessment WHERE id_student = 1;")
dbGetQuery(mydb, "SELECT * FROM studentAssessment ORDER BY id_student LIMIT 10;")
#EXERCISE 3
#Insert a new row in one of your toy data tables leaving one variable empty. Change one value in your other table. Display your new tables. Delete the row you edited and the row you inserted.
dbGetQuery(mydb,"INSERT INTO EDB1 (id_student,gender,region) VALUES ('01000','','East');")
#EXERCISE 2
#Read one of your toy data tables, make sure the output is ordered in descending order, you rename one of the variables and the output is limited to the first 20 rows.
dbGetQuery(mydb,"SELECT id_student AS studentID,gender,region FROM EDB1 ORDER BY id_student DESC LIMIT 20")
#EXERCISE 3
#Insert a new row in one of your toy data tables leaving one variable empty.
dbGetQuery(mydb,"INSERT INTO EDB1 (id_student,gender,region) VALUES ('01000','','East');")
#Update a row
dbGetQuery(mydb, "UPDATE studentAssessment SET score = '20' WHERE id_student = 1;")
dbGetQuery(mydb, "SELECT id_student, score FROM studentAssessment ORDER BY id_student LIMIT 10;")
dbGetQuery(mydb, "SELECT * FROM EDB1 ORDER BY id_student LIMIT 10")
#Add a row
dbGetQuery(mydb, "INSERT INTO studentAssessment (id_assessment, id_student, date_submitted, is_banked, score) VALUES ('00001', '1', '20', '0', '50');")
#View inserted row
dbGetQuery(mydb, "SELECT * FROM studentAssessment ORDER BY id_student LIMIT 10;")
dbGetQuery(mydb, "SELECT * FROM EDB2 ORDER BY id_student LIMIT 5" )
#Change one value in your other table. Display your new tables. Delete the row you edited and the row you inserted.
dbGetQuery(mydb, "UPDATE EDB2 SET num_of_prev_attepts='5' WHERE id_student=11391;")
#Change one value in your other table. Display your new tables. Delete the row you edited and the row you inserted.
dbGetQuery(mydb, "UPDATE EDB2 SET num_of_prev_attempts='5' WHERE id_student=11391;")
dbGetQuery(mydb, "SELECT * FROM EDB2 ORDER BY id_student LIMIT 5" )
dbGetQuery(mydb, "DELETE FROM EDB1 WHERE id_student=1000;")
dbGetQuery(mydb, "DELETE FROM EDB2 WHERE id_student=11391;")
#Creating a new table in SQL
dbGetQuery(mydb,"CREATE TABLE test (
score INTEGER,
student TEXT
);")
dbListTables(mydb)
#Inserting data into the table
dbGetQuery(mydb, "INSERT INTO test VALUES ( 10, 'Amy' );")
dbGetQuery(mydb, "INSERT INTO test VALUES ( 11, 'Jen' );")
dbGetQuery(mydb, "INSERT INTO test VALUES ( 9, 'Frank' );")
dbGetQuery(mydb, "SELECT * FROM test;")
#Inserting a NULL row
dbGetQuery(mydb, "INSERT INTO test DEFAULT VALUES;") #Will not work use instead:
dbGetQuery(mydb,"INSERT INTO test (score, student) SELECT score, id_student FROM studentAssessment;")
dbListTables(mydb)
#EXERCISE 4
#Create a table that is exactly the same as your first toy data table but this time use SQL commands. Display your new table. Then delete the original table.
dbGetQuery(mydb,"CREATE TABLE toy1 (
id_student INTEGER,
gender TEXT,
regiond TEXT
);")
dbListTables(mydb)
#EXERCISE 4
#Create a table that is exactly the same as your first toy data table but this time use SQL commands. Display your new table. Then delete the original table.
dbGetQuery(mydb,"CREATE TABLE toy1 (
id_student INTEGER,
gender TEXT,
region TEXT
);")
dbGetQuery(mydb, "DROP TABLE toy;")
dbGetQuery(mydb, "DROP TABLE toy1;")
#EXERCISE 4
#Create a table that is exactly the same as your first toy data table but this time use SQL commands. Display your new table. Then delete the original table.
dbGetQuery(mydb,"CREATE TABLE toy1 (
id_student INTEGER,
gender TEXT,
region TEXT
);")
dbListTables(mydb)
View(EDB1)
View(EDB1)
View(EDB1)
View(EDB1)
dbGetQuery(mydb, "INSERT INTO toy1 VALUES (11391,'M','Anglican Region');")
dbGetQuery(mydb, "INSERT INTO toy1 VALUES (28400,'F','Scotland');")
dbGetQuery(mydb, "INSERT INTO toy1 VALUES (30268,'F','North Western Region');")
dbGetQuery(mydb, "SELECT * FROM toy1")
bGetQuery(mydb, "DROP TABLE toy1")
dbGetQuery(mydb, "DROP TABLE EDB1")
#EXERCISE 4
#Create a table that is exactly the same as your first toy data table but this time use SQL commands. Display your new table. Then delete the original table.
#Recreated EDB1 and named it toy1
dbGetQuery(mydb,"CREATE TABLE toy1 (
id_student INTEGER,
gender TEXT,
region TEXT
);")
dbGetQuery(mydb, "DROP TABLE IF EXISTS toy1;")
#EXERCISE 4
#Create a table that is exactly the same as your first toy data table but this time use SQL commands. Display your new table. Then delete the original table.
#Recreated EDB1 and named it toy1
dbGetQuery(mydb,"CREATE TABLE toy1 (
id_student INTEGER,
gender TEXT,
region TEXT
);")
#Added data to table
dbGetQuery(mydb, "INSERT INTO toy1  (id_student, gender, region) SELECT id_student, gender, region FROM EDB1;")
dbListTables(mydb)
dbWriteTable(mydb,"EDB1", EDB1)
dbReadTable(mydb, 'EDB1')
dbListTables(mydb)
#Added data to table
dbGetQuery(mydb, "INSERT INTO toy1  (id_student, gender, region) SELECT id_student, gender, region FROM EDB1;")
#Displayed the table
dbGetQuery(mydb, "SELECT * FROM toy1")
#Create table where student column *cannot* be NULL
dbGetQuery(mydb,"CREATE TABLE test2 (
score INTEGER,
student TEXT NOT NULL
);")
dbGetQuery(mydb, "DROP TABLE IF EXISTS test2;")
dbGetQuery(mydb,"CREATE TABLE test2 (
score INTEGER DEFAULT 0,
student TEXT
);")
dbGetQuery(mydb,"INSERT INTO test2 (score, student) VALUES ('1', 'A');")
dbGetQuery(mydb,"INSERT INTO test2 (student) VALUES ('B');")
dbGetQuery(mydb, "SELECT * FROM test2;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS test2;")
View(EDB2)
View(EDB2)
#EXERCISE 5
#Recreate one of your toy data tables with the constraint that for one of the integer variables the default value will be zero. Test your table by inserting some empty values. Display your new tables. Then delete your table.
#Creating Toy table 2 from EDB2 table
dbGetQuery(mydb,"CREATE TABLE toy2 (
id_student INTEGER,
highest_education TEXT
num_of_prev_attempts INTEGER DEFAULT 0
);")
#EXERCISE 5
#Recreate one of your toy data tables with the constraint that for one of the integer variables the default value will be zero. Test your table by inserting some empty values. Display your new tables. Then delete your table.
#Creating Toy table 2 from EDB2 table
dbGetQuery(mydb,"CREATE TABLE toy2 (
id_student INTEGER,
highest_education TEXT,
num_of_prev_attempts INTEGER DEFAULT 0
);")
dbListTables(mydb)
#Add Values
dbGetQuery(mydb,"INSERT INTO toy2 (id_student,highest_education,num_of_prev_attempts) SELECT id_student,highest_education,num_of_prev_attempts FROM toy2;")
#display table
dbGetQuery(mydb,"SELECT *, FROM toy2")
#display table
dbGetQuery(mydb,"SELECT * FROM toy2")
#display table
dbGetQuery(mydb,"SELECT * FROM toy2")
#Add Values
dbGetQuery(mydb,"INSERT INTO toy2 (id_student,highest_education,num_of_prev_attempts) SELECT id_student,highest_education,num_of_prev_attempts FROM EDB2;")
#display table
dbGetQuery(mydb,"SELECT * FROM toy2")
dbGetQuery(mydb, "DROP TABLE toy2" )
dbGetQuery(mydb,"CREATE TABLE test3 (
id INTEGER AUTO_INCREMENT PRIMARY KEY, #Not standard syntax
score INTEGER,
student TEXT
);")
dbGetQuery(mydb,"INSERT INTO test3 (score, student) VALUES (1, 'A');")
dbGetQuery(mydb,"INSERT INTO test3 (score, student) VALUES (5, 'B');")
dbGetQuery(mydb, "SELECT * FROM test3;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS test3;")
dbGetQuery(mydb, "INSERT INTO toy3 (id,score,student,Gender) VALUES (1,80,'A',M);")
#EXERCISE 7
#Create a new table with four variables and a primary key that is a sequential id value.
dbGetQuery(mydb,"CREATE TABLE toy3 (
id INTEGER AUTO_INCREMENT PRIMARY KEY,
score INTEGER,
student TEXT
Gender TEXT
);")
#EXERCISE 7
#Create a new table with four variables and a primary key that is a sequential id value.
dbGetQuery(mydb,"CREATE TABLE toy3 (
id INTEGER AUTO_INCREMENT PRIMARY KEY,
score INTEGER,
student TEXT,
Gender TEXT
);")
dbGetQuery(mydb, "INSERT INTO toy3 (id,score,student,Gender) VALUES (1,80,'A',M);")
dbGetQuery(mydb, "INSERT INTO toy3 (id,score,student,Gender) VALUES (1,80,'A','M');")
dbGetQuery(mydb, "INSERT INTO toy3 (id,score,student,Gender) VALUES (4,50,'D','F');")
dbGetQuery(mydb, "SELECT * FROM toy3")
dbGetQuery(mydb,"CREATE TABLE test3 (
id INTEGER AUTO_INCREMENT PRIMARY KEY, #Not standard syntax
score INTEGER,
student TEXT
);")
dbGetQuery(mydb,"INSERT INTO test3 (score, student) VALUES (1, 'A');")
dbGetQuery(mydb,"INSERT INTO test3 (score, student) VALUES (5, 'B');")
dbGetQuery(mydb, "SELECT * FROM test3;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS toy3;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS test3;")
#EXERCISE 7
#Create a new table with four variables and a primary key that is a sequential id value.
dbGetQuery(mydb,"CREATE TABLE toy3 (
id INTEGER AUTO_INCREMENT PRIMARY KEY,
score INTEGER,
student TEXT,
Gender TEXT
);")
dbGetQuery(mydb, "INSERT INTO toy3 (score,student,Gender) VALUES (80,'A','M');")
dbGetQuery(mydb, "INSERT INTO toy3 (score,student,Gender) VALUES (50,'D','F');")
#Display
dbGetQuery(mydb, "SELECT * FROM toy3")
#Add a column with default value 1
dbGetQuery(mydb, "ALTER TABLE studentAssessment ADD email INTEGER DEFAULT 1 ")
dbGetQuery(mydb, "SELECT * FROM studentAssessment LIMIT 10;")
#Delete a column
dbGetQuery(mydb, "ALTER TABLE studentAssessment DROP COLUMN email;")
dbGetQuery(mydb, "ALTER TABLE toy1 ADD test INTEGER DEFAULT 3 ")
dbGetQuery(mydb, "SELECT * FROM toy1 LIMIT 10;")
#Delete a column
dbGetQuery(mydb, "ALTER TABLE toy1 DROP COLUMN test;")
dbGetQuery(mydb, "SELECT id_student, date_submitted FROM studentAssessment WHERE date_submitted > 550 ORDER BY date_submitted DESC;")
#LIKE
dbGetQuery(mydb, "SELECT id_student, gender, region FROM studentInfo WHERE region LIKE '%Region%';")
#Begin with 'Region'
dbGetQuery(mydb, "SELECT id_student, gender, region FROM studentInfo WHERE region LIKE 'Region%';")
#End with 'Region'
dbGetQuery(mydb, "SELECT id_student, gender, region FROM studentInfo WHERE region LIKE '%Region';")
#'c' is the second letter
dbGetQuery(mydb, "SELECT id_student, gender, region FROM studentInfo WHERE region LIKE '_c%';")
#Begin with 'Region'
dbGetQuery(mydb, "SELECT id_student, gender, region FROM studentInfo WHERE region LIKE 'Region%';")
#IN
dbGetQuery(mydb, "SELECT id_student, gender, region FROM studentInfo WHERE region IN ('Wales','Ireland');")
#EXERCISE 8
#Query one of your original toy data tables, for two different conditions.
dbGetQuery(mydb, "SELECT id_student,gender, region FROM toy1 WHERE gender is F AND region IN ('East Anglian Region');")
#EXERCISE 8
#Query one of your original toy data tables, for two different conditions.
dbGetQuery(mydb, "SELECT id_student,gender, region FROM toy1 WHERE gender= F AND region IN ('East Anglian Region');")
#EXERCISE 8
#Query one of your original toy data tables, for two different conditions.
dbGetQuery(mydb, "SELECT id_student,gender, region FROM toy1 WHERE gender= 'F' AND region IN ('East Anglian Region');")
dbGetQuery(mydb, "SELECT DISTINCT region FROM studentInfo;")
dbGetQuery(mydb, "SELECT DISTINCT region, gender FROM studentInfo;")
#EXERCISE 9
#Insert a duplicate row into one of your toy data tables. Then query the table without including duplicates.
dbGetQuery(mydb, "INSERT INTO toy1,(id_student,gender,region) VALUES (11391,'M','East Anglian Region');")
#EXERCISE 9
#Insert a duplicate row into one of your toy data tables. Then query the table without including duplicates.
dbGetQuery(mydb, "INSERT INTO toy1 (id_student,gender,region) VALUES (11391,'M','East Anglian Region');")
deGetQuery (mydb, "SELECT * FROM toy1")
dbGetQuery (mydb, "SELECT * FROM toy1")
#EXERCISE 9
#Insert a duplicate row into one of your toy data tables. Then query the table without including duplicates.
dbGetQuery(mydb, "INSERT INTO toy1 (id_student,gender,region) VALUES (11391,'M','USA');")
dbGetQuery (mydb, "SELECT * FROM toy1")
#EXERCISE 9
#Insert a duplicate row into one of your toy data tables. Then query the table without including duplicates.
dbGetQuery(mydb, "INSERT INTO toy1 (id_student,gender,region) VALUES (11391	,'M','USA');")
dbGetQuery (mydb, "SELECT * FROM toy1")
#EXERCISE 9
#Insert a duplicate row into one of your toy data tables. Then query the table without including duplicates.
dbGetQuery(mydb, "INSERT INTO toy1 (id_student,gender,region) VALUES ('11391'	,'M','USA');")
dbGetQuery (mydb, "SELECT * FROM toy1")
dbGetQuery (mydb, "SELECT * FROM toy1 SORT BY id_student DESC")
dbGetQuery (mydb, "SELECT * FROM toy1 SORT BY id_student DESC LIMIT 10")
dbGetQuery (mydb, "SELECT id_student,gender,region FROM toy1 SORT BY id_student DESC LIMIT 10")
dbGetQuery (mydb, "SELECT * FROM toy1 SORT BY id_student ")
dbGetQuery (mydb, "SELECT * FROM toy1 ORDER BY id_student DESC ")
dbGetQuery (mydb, "SELECT * FROM toy1 ORDER BY id_student")
dbGetQuery(mydb, "SELECT DISTINCT id_student,region FROM toy1")
#EXERCISE 10
# Create a common id variable in your two toy data tables. Then join those tables so that your query returns all the values from one table and only those that match from the other.
dbGetQuery(mydb, "SELECT FROM EDB1 JOIN EDB2 ON EDB1.id_studen=EDB2.id_student")
#EXERCISE 10
# Create a common id variable in your two toy data tables. Then join those tables so that your query returns all the values from one table and only those that match from the other.
dbGetQuery(mydb, "SELECT * FROM EDB1 JOIN EDB2 ON EDB1.id_studen=EDB2.id_student")
#EXERCISE 10
# Create a common id variable in your two toy data tables. Then join those tables so that your query returns all the values from one table and only those that match from the other.
dbGetQuery(mydb, "SELECT * FROM toy1 JOIN toy2 ON toy1.id_student=toy2.id_student")
#EXERCISE 10
# Create a common id variable in your two toy data tables. Then join those tables so that your query returns all the values from one table and only those that match from the other.
dbGetQuery(mydb, "SELECT * FROM EDB1 JOIN EDB2 ON EDB1.id_student=EDB2.id_student")
#EXERCISE 10
# Create a common id variable in your two toy data tables. Then join those tables so that your query returns all the values from one table and only those that match from the other.
dbGetQuery(mydb, "SELECT * FROM EDB1 INNER JOIN EDB2 ON EDB1.id_student=EDB2.id_student")
#EXERCISE 10
# Create a common id variable in your two toy data tables. Then join those tables so that your query returns all the values from one table and only those that match from the other.
dbGetQuery(mydb, "SELECT * FROM EDB1 LEFT JOIN EDB2 USING id_student")
#EXERCISE 10
# Create a common id variable in your two toy data tables. Then join those tables so that your query returns all the values from one table and only those that match from the other.
dbGetQuery(mydb, "SELECT * FROM EDB1 LEFT JOIN EDB2 USING (id_student)")
